import{db as t,initializeMessaging as e}from"./firebase-init.mjs";import{doc as a,getDoc as r,setDoc as i,deleteDoc as s}from"https://www.gstatic.com/firebasejs/12.3.0/firebase-firestore.js";import{getToken as n}from"https://www.gstatic.com/firebasejs/12.3.0/firebase-messaging.js";export async function fetchAndScheduleJamaatReminders(){if(!self.registration)return;(await self.registration.getNotifications({tag:"jamaat-reminder"})).forEach((t=>t.close()));try{const e=a(t,"/artifacts/masjid-connect-app/public/data/prayerTimes/today"),i=await r(e),s=i.exists()?i.data():{},n=new Date,o=`${String(n.getDate()).padStart(2,"0")}-${String(n.getMonth()+1).padStart(2,"0")}`,c=a(t,`/artifacts/masjid-connect-app/public/data/prayerCalendar/${o}`),m=await r(c);m.exists()&&m.data().Maghrib&&(s.Maghrib=m.data().Maghrib);const g=new Date,f=5===g.getDay(),u=["Fajr","Asr","Maghrib","Isha"];f?u.push("Jumma"):u.push("Zuhr");for(const t of u){const e=s[t];if("string"!=typeof e||!e.includes(":"))continue;const[a,r]=e.split(":"),i=new Date;i.setHours(a,r,0,0);const n=i.getTime()-9e5;n>g.getTime()&&self.registration.showNotification(`${t} Jamaat Reminder`,{body:`Jamaat for ${t} is in 15 minutes.`,icon:"/fav192.png",tag:"jamaat-reminder",timestamp:n})}}catch(t){console.error("[SW] Error scheduling reminders:",t)}}export async function subscribeToTopic(r,s){if(!s)return console.error("Service Worker is not registered. Cannot subscribe to topic."),!1;const{messaging:o,messagingSupported:c}=await e();if(!c)return alert("Push notifications are not supported on this device."),!1;try{const e=await n(o,{vapidKey:"BCiOgp50gotHnfdiLjtx86mJZ-hGV94JWVuLjsiPsBd-CFAMpg8REdBZs6zb0Ofr5Lpo7Ezu50yAfEhgmcqIcMY",serviceWorkerRegistration:serviceWorkerRegistration});if(e){const s="announcements"===r?"announcementTokens":"jamaatTokens";return await i(a(t,s,e),{subscribedAt:new Date}),"jamaat"===r&&await fetchAndScheduleJamaatReminders(),!0}return!1}catch(t){return console.error(`Error subscribing to ${r}:`,t),!1}}export async function unsubscribeFromTopic(r,i){if(!i)return void console.error("Service Worker is not registered. Cannot unsubscribe.");const{messaging:o}=await e(),c=await n(o,{serviceWorkerRegistration:serviceWorkerRegistration});if(!c)return;const m="announcements"===r?"announcementTokens":"jamaatTokens";if(await s(a(t,m,c)),"jamaat"===r){(await i.getNotifications({tag:"jamaat-reminder"})).forEach((t=>t.close()))}}
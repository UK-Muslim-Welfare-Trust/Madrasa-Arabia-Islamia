import{initializeApp as e}from"https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";import{getAuth as n,signInAnonymously as t,signInWithCustomToken as s,onAuthStateChanged as o}from"https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";import{getFirestore as i,doc as a,onSnapshot as r,setLogLevel as c}from"https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";let l;"serviceWorker"in navigator&&window.addEventListener("load",(()=>{navigator.serviceWorker.register("/sw.js").then((e=>console.log("Service Worker registered with scope:",e.scope))).catch((e=>console.error("Service Worker registration failed:",e)))}));const d=document.getElementById("install-button");window.addEventListener("beforeinstallprompt",(e=>{e.preventDefault(),l=e,d.classList.remove("hidden"),console.log("`beforeinstallprompt` event was fired.")})),d.addEventListener("click",(async()=>{if(d.classList.add("hidden"),l){l.prompt();const{outcome:e}=await l.userChoice;console.log(`User response to the install prompt: ${e}`),l=null}})),window.addEventListener("appinstalled",(()=>{d.classList.add("hidden"),l=null,console.log("PWA was installed")}));const p="undefined"!=typeof __app_id?__app_id:"masjid-connect-app";let m;try{m="undefined"!=typeof __firebase_config?JSON.parse(__firebase_config):{apiKey:"AIzaSyDuq7jYQcKDKY3UWNxQwP51fKRwjCERuvo",authDomain:"wakefield-central-mosque.firebaseapp.com",projectId:"wakefield-central-mosque",storageBucket:"wakefield-central-mosque.firebasestorage.app",messagingSenderId:"998395111777",appId:"1:998395111777:web:5492302e7279822d5cbd20",measurementId:"G-NXER4ENDE0"}}catch(e){console.error("Could not parse Firebase config",e),document.body.innerHTML='<div class="text-red-500 text-center p-8">Error: Firebase configuration is missing or invalid. Please follow the setup instructions in README.md.</div>'}m.apiKey||console.warn("Firebase config is missing. App will not connect to Firestore.");const g=e(m),u=i(g),f=n(g);c("debug"),o(f,(e=>{e?(console.log("User is signed in with UID:",e.uid),function(){const e=document.getElementById("prayer-times-loading"),n=document.getElementById("prayer-times-content"),t=document.getElementById("prayer-times-error"),s=a(u,`/artifacts/${p}/public/data/prayerTimes/today`);r(s,(s=>{if(e.style.display="none",s.exists()){t.classList.add("hidden");const e=s.data();let o="";["Fajr","Dhuhr","Asr","Maghrib","Isha"].forEach((n=>{e[n]&&(o+=`\n                                <div class="flex justify-between items-center text-lg">\n                                    <span class="text-gray-300">${n}</span>\n                                    <span class="font-semibold text-white">${e[n]}</span>\n                                </div>\n                            `)})),n.innerHTML=o}else console.log("No prayer times document found!"),n.innerHTML="",t.classList.remove("hidden")}),(n=>{console.error("Error fetching prayer times: ",n),e.style.display="none",t.classList.remove("hidden")}))}(),function(){const e=document.getElementById("announcements-loading"),n=document.getElementById("announcements-content"),t=document.getElementById("announcements-error"),s=a(u,`/artifacts/${p}/public/data/announcements/latest`);r(s,(s=>{if(e.style.display="none",s.exists()){t.classList.add("hidden");const e=s.data();let o=`\n                        <div class="bg-gray-700 p-4 rounded-lg">\n                            <h3 class="font-bold text-lg text-white mb-2">${e.title||"Announcement"}</h3>\n                            <p class="text-gray-300 whitespace-pre-wrap">${e.message||"No message available."}</p>\n                        </div>\n                    `;n.innerHTML=o}else console.log("No announcements document found!"),n.innerHTML='<p class="text-gray-400 text-center">No new announcements.</p>'}),(n=>{console.error("Error fetching announcements: ",n),e.style.display="none",t.classList.remove("hidden")}))}()):(console.log("User is not signed in. Attempting to sign in."),async function(){try{"undefined"!=typeof __initial_auth_token&&__initial_auth_token?(await s(f,__initial_auth_token),console.log("Signed in with custom token.")):(await t(f),console.log("Signed in anonymously."))}catch(e){console.error("Error signing in: ",e)}}())}));